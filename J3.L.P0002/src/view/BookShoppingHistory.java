/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import model.dao.BillsDAO;
import model.dao.BookSaleDAO;
import model.dto.BillsDTO;
import model.dto.BookSaleDTO;
import ulti.Ulti;

/**
 *
 * @author THE HIEN
 */
public class BookShoppingHistory extends javax.swing.JFrame {

    /**
     * Creates new form BookShoppingHistory
     */
    private String userID;

    public BookShoppingHistory(String UserID) {
        initComponents();
        this.userID = UserID;
        txtBillCode.setEditable(false);
        initTblBills();
        registerTxtSearchTitle();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearchTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSearchDate = new javax.swing.JTextField();
        btnSearchDate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBills = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBillDetail = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txtBillCode = new javax.swing.JTextField();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("BOOK SHOPPING HISTORY");

        jLabel2.setText("TITLE");

        txtSearchTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchTitleActionPerformed(evt);
            }
        });

        btnSearchDate.setText("BY DATE");
        btnSearchDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDateActionPerformed(evt);
            }
        });

        tblBills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bill Code", "Import Date", "Total Price", "Discount Code", "Discount(%)", "True Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBills.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBillsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBills);

        tblBillDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Title", "Price", "Amount       "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblBillDetail);

        jLabel5.setText("Selected Bill");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnSearchDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearchDate, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSearchTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(15, 15, 15)))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBillCode, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearchTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchDate)
                    .addComponent(jLabel5)
                    .addComponent(txtBillCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(100, 100, 100))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetTable(DefaultTableModel model) {
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
    }

    private void registerTxtSearchTitle() {
        txtSearchTitle.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                searchBillWithBookOfTitle();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                searchBillWithBookOfTitle();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                searchBillWithBookOfTitle();
            }
        });
    }

    private void searchBillWithBookOfTitle() {
        try {
            String title = txtSearchTitle.getText().trim();

            DefaultTableModel model = (DefaultTableModel) tblBills.getModel();

            BillsDAO billDAO = new BillsDAO();

            Vector<BillsDTO> listSearch = billDAO.searchBillsByBookTitles(title, userID);
            listSearch.sort((BillsDTO left, BillsDTO right) -> left.getImportDate().compareTo(right.getImportDate()));

            resetTable(model);
            for (BillsDTO bill : listSearch) {
                model.addRow(bill.toVector());
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BookShoppingHistory.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(BookShoppingHistory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initTblBills() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblBills.getModel();
            BillsDAO billDAO = new BillsDAO();

            Vector<BillsDTO> listBills = billDAO.getUserBills(userID);
            listBills.sort((BillsDTO left, BillsDTO right) -> left.getImportDate().compareTo(right.getImportDate()));
            resetTable(model);
            for (BillsDTO bill : listBills) {
                model.addRow(bill.toVector());
            }

        } catch (SQLException ex) {
            Logger.getLogger(BookShoppingHistory.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BookShoppingHistory.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void txtSearchTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchTitleActionPerformed

    private void tblBillsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBillsMouseClicked
        try {
            int selected = tblBills.getSelectedRow();

            String billCode = (String) tblBills.getModel().getValueAt(selected, 0);
            txtBillCode.setText(billCode);
            DefaultTableModel model = (DefaultTableModel) tblBillDetail.getModel();
            BookSaleDAO bookSaleDAO = new BookSaleDAO();
            Vector<BookSaleDTO> listBookSale = bookSaleDAO.getAllBooksInBill(billCode);
            resetTable(model);
            for (BookSaleDTO bookSaleDTO : listBookSale) {
                model.addRow(bookSaleDTO.toVector());
            }

        } catch (SQLException ex) {
            Logger.getLogger(BookShoppingHistory.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BookShoppingHistory.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_tblBillsMouseClicked

    private void btnSearchDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDateActionPerformed
        try {
            String date = txtSearchDate.getText().trim();
            if (date.isEmpty()) {
                initTblBills();
                return;
            }
            Timestamp searchDate = null;
            try {
                searchDate = Ulti.getSearchDate(date);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Date must follow \"dd-MM-yyyy\"");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tblBills.getModel();

            BillsDAO billDAO = new BillsDAO();

            Vector<BillsDTO> listSearch = billDAO.searchBillsByDate(searchDate, userID);

            resetTable(model);
            for (BillsDTO bill : listSearch) {
                model.addRow(bill.toVector());
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BookShoppingHistory.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(BookShoppingHistory.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnSearchDateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearchDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblBillDetail;
    private javax.swing.JTable tblBills;
    private javax.swing.JTextField txtBillCode;
    private javax.swing.JTextField txtSearchDate;
    private javax.swing.JTextField txtSearchTitle;
    // End of variables declaration//GEN-END:variables
}
